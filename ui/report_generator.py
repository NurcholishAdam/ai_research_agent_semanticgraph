# -*- coding: utf-8 -*-
"""
Report Generator for AI Research Agent - Phase 5 User Experience
Generates professional reports in multiple formats (PDF, DOCX, HTML)
"""

from typing import Dict, Any, List
from datetime import datetime
import json
import os
from jinja2 import Template
import base64

# For PDF generation
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

# For DOCX generation
try:
    from docx import Document
    from docx.shared import Inches
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

class ResearchReportGenerator:
    """Generates professional research reports in multiple formats"""
    
    def __init__(self):
        self.report_templates = self._load_templates()
    
    def _load_templates(self) -> Dict[str, str]:
        """Load report templates"""
        
        html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Research Report</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 2rem;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5rem;
        }
        .header p {
            margin: 0.5rem 0 0 0;
            opacity: 0.9;
        }
        .section {
            background: white;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .section h2 {
            color: #667eea;
            border-bottom: 2px solid #667eea;
            padding-bottom: 0.5rem;
            margin-bottom: 1rem;
        }
        .section h3 {
            color: #764ba2;
            margin-top: 1.5rem;
        }
        .metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }
        .metric-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #667eea;
        }
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }
        .metric-label {
            color: #666;
            font-size: 0.9rem;
        }
        .quality-indicator {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            margin: 0.2rem;
        }
        .quality-good {
            background-color: #d4edda;
            color: #155724;
        }
        .quality-poor {
            background-color: #f8d7da;
            color: #721c24;
        }
        .hypothesis {
            background: #f8f9fa;
            border-left: 4px solid #28a745;
            padding: 1rem;
            margin: 1rem 0;
        }
        .research-step {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            border-left: 4px solid #17a2b8;
        }
        .footer {
            text-align: center;
            color: #666;
            margin-top: 2rem;
            padding: 1rem;
            border-top: 1px solid #eee;
        }
        @media print {
            body { background-color: white; }
            .section { box-shadow: none; border: 1px solid #ddd; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üî¨ AI Research Report</h1>
        <p>Generated by Advanced AI Research Intelligence System</p>
        <p>{{ timestamp }}</p>
    </div>

    <div class="section">
        <h2>üìã Research Question</h2>
        <p><strong>{{ question }}</strong></p>
    </div>

    <div class="section">
        <h2>üìä Research Metrics</h2>
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">{{ metrics.quality_score }}</div>
                <div class="metric-label">Quality Score</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{{ metrics.findings_count }}</div>
                <div class="metric-label">Research Steps</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{{ metrics.hypotheses_count }}</div>
                <div class="metric-label">Hypotheses</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{{ metrics.confidence }}</div>
                <div class="metric-label">Confidence</div>
            </div>
        </div>
    </div>

    <div class="section">
        <h2>üéØ Final Answer</h2>
        {{ final_answer_html }}
    </div>

    <div class="section">
        <h2>üî¨ Research Process</h2>
        <h3>Research Plan</h3>
        <ol>
        {% for step in research_plan %}
            <li>{{ step }}</li>
        {% endfor %}
        </ol>

        <h3>Key Findings</h3>
        {% for finding in findings %}
        <div class="research-step">
            <h4>Step {{ finding.step + 1 }}: {{ finding.step_description }}</h4>
            <p>{{ finding.summary }}</p>
            {% if finding.sources %}
            <p><strong>Sources:</strong> {{ finding.sources }}</p>
            {% endif %}
        </div>
        {% endfor %}
    </div>

    {% if hypotheses %}
    <div class="section">
        <h2>üß† Generated Hypotheses</h2>
        {% for hypothesis in hypotheses %}
        <div class="hypothesis">
            <h4>{{ hypothesis.statement }}</h4>
            <p><strong>Type:</strong> {{ hypothesis.type }}</p>
            <p><strong>Confidence:</strong> {{ hypothesis.confidence }}</p>
            {% if hypothesis.evidence %}
            <p><strong>Supporting Evidence:</strong></p>
            <ul>
            {% for evidence in hypothesis.evidence %}
                <li>{{ evidence }}</li>
            {% endfor %}
            </ul>
            {% endif %}
        </div>
        {% endfor %}
    </div>
    {% endif %}

    <div class="section">
        <h2>üìä Quality Assessment</h2>
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">{{ quality.overall_score }}/10</div>
                <div class="metric-label">Overall Quality</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{{ quality.external_sources }}</div>
                <div class="metric-label">External Sources</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{{ quality.source_diversity }}</div>
                <div class="metric-label">Source Diversity</div>
            </div>
        </div>

        <h3>Quality Indicators</h3>
        {% for indicator, status in quality.indicators.items() %}
        <span class="quality-indicator {{ 'quality-good' if status else 'quality-poor' }}">
            {{ '‚úÖ' if status else '‚ùå' }} {{ indicator.replace('_', ' ').title() }}
        </span>
        {% endfor %}
    </div>

    {% if multi_agent %}
    <div class="section">
        <h2>ü§ñ Multi-Agent Analysis</h2>
        <h3>Agent Confidence Scores</h3>
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">{{ multi_agent.researcher_confidence }}</div>
                <div class="metric-label">Researcher Agent</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{{ multi_agent.critic_confidence }}</div>
                <div class="metric-label">Critic Agent</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{{ multi_agent.synthesizer_confidence }}</div>
                <div class="metric-label">Synthesizer Agent</div>
            </div>
        </div>
    </div>
    {% endif %}

    <div class="footer">
        <p>This report was generated by the AI Research Agent - Phase 5 User Experience</p>
        <p>Featuring Multi-Agent Intelligence, Hypothesis Testing, and Quality Assessment</p>
    </div>
</body>
</html>
        """
        
        markdown_template = """# üî¨ AI Research Report

**Generated:** {{ timestamp }}
**Research Question:** {{ question }}

## üìä Research Metrics

| Metric | Value |
|--------|-------|
| Quality Score | {{ metrics.quality_score }}/10 |
| Research Steps | {{ metrics.findings_count }} |
| Hypotheses Generated | {{ metrics.hypotheses_count }} |
| Confidence Level | {{ metrics.confidence }} |

## üéØ Final Answer

{{ final_answer }}

## üî¨ Research Process

### Research Plan
{% for step in research_plan %}
{{ loop.index }}. {{ step }}
{% endfor %}

### Key Findings
{% for finding in findings %}
#### Step {{ finding.step + 1 }}: {{ finding.step_description }}

{{ finding.summary }}

{% if finding.sources %}**Sources:** {{ finding.sources }}{% endif %}

{% endfor %}

{% if hypotheses %}
## üß† Generated Hypotheses

{% for hypothesis in hypotheses %}
### {{ hypothesis.statement }}

- **Type:** {{ hypothesis.type }}
- **Confidence:** {{ hypothesis.confidence }}

{% if hypothesis.evidence %}
**Supporting Evidence:**
{% for evidence in hypothesis.evidence %}
- {{ evidence }}
{% endfor %}
{% endif %}

{% endfor %}
{% endif %}

## üìä Quality Assessment

- **Overall Quality Score:** {{ quality.overall_score }}/10
- **External Sources Used:** {{ quality.external_sources }}
- **Source Diversity:** {{ quality.source_diversity }}

### Quality Indicators
{% for indicator, status in quality.indicators.items() %}
- {{ '‚úÖ' if status else '‚ùå' }} {{ indicator.replace('_', ' ').title() }}
{% endfor %}

{% if multi_agent %}
## ü§ñ Multi-Agent Analysis

### Agent Confidence Scores
- **Researcher Agent:** {{ multi_agent.researcher_confidence }}
- **Critic Agent:** {{ multi_agent.critic_confidence }}
- **Synthesizer Agent:** {{ multi_agent.synthesizer_confidence }}
{% endif %}

---

*This report was generated by the AI Research Agent - Phase 5 User Experience*
*Featuring Multi-Agent Intelligence, Hypothesis Testing, and Quality Assessment*
        """
        
        return {
            'html': html_template,
            'markdown': markdown_template
        }
    
    def generate_html_report(self, research_result: Dict[str, Any], question: str) -> str:
        """Generate HTML report"""
        
        template = Template(self.report_templates['html'])
        
        # Prepare data for template
        template_data = self._prepare_template_data(research_result, question)
        
        # Convert final answer to HTML paragraphs
        final_answer = research_result.get('final_answer', 'No final answer generated')
        final_answer_html = '<br>'.join([f'<p>{para.strip()}</p>' for para in final_answer.split('\n') if para.strip()])
        template_data['final_answer_html'] = final_answer_html
        
        return template.render(**template_data)
    
    def generate_markdown_report(self, research_result: Dict[str, Any], question: str) -> str:
        """Generate Markdown report"""
        
        template = Template(self.report_templates['markdown'])
        template_data = self._prepare_template_data(research_result, question)
        
        return template.render(**template_data)
    
    def generate_pdf_report(self, research_result: Dict[str, Any], question: str, filename: str) -> str:
        """Generate PDF report"""
        
        if not REPORTLAB_AVAILABLE:
            return "PDF generation requires reportlab. Install with: pip install reportlab"
        
        try:
            doc = SimpleDocTemplate(filename, pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                spaceAfter=30,
                alignment=1,  # Center
                textColor=colors.HexColor('#1f77b4')
            )
            story.append(Paragraph("üî¨ AI Research Report", title_style))
            story.append(Spacer(1, 12))
            
            # Timestamp
            story.append(Paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
            story.append(Spacer(1, 12))
            
            # Research Question
            story.append(Paragraph("Research Question", styles['Heading2']))
            story.append(Paragraph(question, styles['Normal']))
            story.append(Spacer(1, 12))
            
            # Metrics Table
            quality_assessment = research_result.get('quality_assessment', {})
            metrics_data = [
                ['Metric', 'Value'],
                ['Quality Score', f"{quality_assessment.get('overall_quality_score', 'N/A')}/10"],
                ['Research Steps', str(len(research_result.get('findings', [])))],
                ['Hypotheses', str(len(research_result.get('hypotheses', [])))],
                ['Confidence', f"{quality_assessment.get('confidence_assessment', 0):.2f}"]
            ]
            
            metrics_table = Table(metrics_data)
            metrics_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 14),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(Paragraph("Research Metrics", styles['Heading2']))
            story.append(metrics_table)
            story.append(Spacer(1, 12))
            
            # Final Answer
            story.append(Paragraph("Final Answer", styles['Heading2']))
            final_answer = research_result.get('final_answer', 'No final answer generated')
            for para in final_answer.split('\n'):
                if para.strip():
                    story.append(Paragraph(para.strip(), styles['Normal']))
            story.append(Spacer(1, 12))
            
            # Research Process
            story.append(Paragraph("Research Process", styles['Heading2']))
            research_plan = research_result.get('research_plan', [])
            for i, step in enumerate(research_plan, 1):
                story.append(Paragraph(f"{i}. {step}", styles['Normal']))
            story.append(Spacer(1, 12))
            
            # Build PDF
            doc.build(story)
            
            return f"PDF report generated successfully: {filename}"
            
        except Exception as e:
            return f"PDF generation failed: {str(e)}"
    
    def generate_docx_report(self, research_result: Dict[str, Any], question: str, filename: str) -> str:
        """Generate DOCX report"""
        
        if not DOCX_AVAILABLE:
            return "DOCX generation requires python-docx. Install with: pip install python-docx"
        
        try:
            doc = Document()
            
            # Title
            title = doc.add_heading('üî¨ AI Research Report', 0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Timestamp
            doc.add_paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Research Question
            doc.add_heading('Research Question', level=1)
            doc.add_paragraph(question)
            
            # Metrics
            doc.add_heading('Research Metrics', level=1)
            quality_assessment = research_result.get('quality_assessment', {})
            
            metrics_table = doc.add_table(rows=1, cols=2)
            metrics_table.style = 'Table Grid'
            hdr_cells = metrics_table.rows[0].cells
            hdr_cells[0].text = 'Metric'
            hdr_cells[1].text = 'Value'
            
            metrics = [
                ('Quality Score', f"{quality_assessment.get('overall_quality_score', 'N/A')}/10"),
                ('Research Steps', str(len(research_result.get('findings', [])))),
                ('Hypotheses', str(len(research_result.get('hypotheses', [])))),
                ('Confidence', f"{quality_assessment.get('confidence_assessment', 0):.2f}")
            ]
            
            for metric, value in metrics:
                row_cells = metrics_table.add_row().cells
                row_cells[0].text = metric
                row_cells[1].text = value
            
            # Final Answer
            doc.add_heading('Final Answer', level=1)
            final_answer = research_result.get('final_answer', 'No final answer generated')
            doc.add_paragraph(final_answer)
            
            # Research Process
            doc.add_heading('Research Process', level=1)
            research_plan = research_result.get('research_plan', [])
            for i, step in enumerate(research_plan, 1):
                doc.add_paragraph(f"{i}. {step}")
            
            # Save document
            doc.save(filename)
            
            return f"DOCX report generated successfully: {filename}"
            
        except Exception as e:
            return f"DOCX generation failed: {str(e)}"
    
    def _prepare_template_data(self, research_result: Dict[str, Any], question: str) -> Dict[str, Any]:
        """Prepare data for template rendering"""
        
        quality_assessment = research_result.get('quality_assessment', {})
        multi_agent_analysis = research_result.get('multi_agent_analysis', {})
        hypotheses = research_result.get('hypotheses', [])
        findings = research_result.get('findings', [])
        research_plan = research_result.get('research_plan', [])
        
        # Prepare findings data
        findings_data = []
        for finding in findings:
            analysis = finding.get('analysis', '')
            summary = analysis.split('KEY_FINDINGS:')[1].split('NEW_CONCEPTS:')[0].strip() if 'KEY_FINDINGS:' in analysis else analysis[:200]
            
            sources_used = finding.get('sources_used', {})
            sources_text = f"Memory: {sources_used.get('memory_basic', 0)}, External: {sources_used.get('external_sources', 0)}"
            
            findings_data.append({
                'step': finding['step'],
                'step_description': finding['step_description'],
                'summary': summary,
                'sources': sources_text
            })
        
        # Prepare hypotheses data
        hypotheses_data = []
        for hyp in hypotheses:
            hypotheses_data.append({
                'statement': hyp['statement'],
                'type': hyp['type'],
                'confidence': f"{hyp['confidence']:.2f}",
                'evidence': hyp.get('supporting_evidence', [])[:3]
            })
        
        # Prepare multi-agent data
        confidence_scores = multi_agent_analysis.get('confidence_scores', {})
        multi_agent_data = {
            'researcher_confidence': f"{confidence_scores.get('researcher_avg', 0):.2f}",
            'critic_confidence': f"{confidence_scores.get('critic_avg', 0):.2f}",
            'synthesizer_confidence': f"{confidence_scores.get('synthesis_confidence', 0):.2f}"
        }
        
        return {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'question': question,
            'final_answer': research_result.get('final_answer', 'No final answer generated'),
            'research_plan': research_plan,
            'findings': findings_data,
            'hypotheses': hypotheses_data,
            'metrics': {
                'quality_score': f"{quality_assessment.get('overall_quality_score', 'N/A')}/10",
                'findings_count': len(findings),
                'hypotheses_count': len(hypotheses),
                'confidence': f"{quality_assessment.get('confidence_assessment', 0):.2f}"
            },
            'quality': {
                'overall_score': quality_assessment.get('overall_quality_score', 'N/A'),
                'external_sources': quality_assessment.get('external_sources_used', 0),
                'source_diversity': quality_assessment.get('source_diversity', 0),
                'indicators': quality_assessment.get('quality_indicators', {})
            },
            'multi_agent': multi_agent_data if confidence_scores else None
        }

def generate_research_report(research_result: Dict[str, Any], question: str, 
                           format_type: str = 'html', filename: str = None) -> str:
    """Convenience function to generate research reports"""
    
    generator = ResearchReportGenerator()
    
    if filename is None:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"research_report_{timestamp}"
    
    if format_type.lower() == 'html':
        return generator.generate_html_report(research_result, question)
    elif format_type.lower() == 'markdown':
        return generator.generate_markdown_report(research_result, question)
    elif format_type.lower() == 'pdf':
        return generator.generate_pdf_report(research_result, question, f"{filename}.pdf")
    elif format_type.lower() == 'docx':
        return generator.generate_docx_report(research_result, question, f"{filename}.docx")
    else:
        raise ValueError(f"Unsupported format: {format_type}. Use 'html', 'markdown', 'pdf', or 'docx'.")